name: Release

on:
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Version type'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
      prerelease:
        description: 'Is this a prerelease version'
        required: false
        default: false
        type: boolean

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: 'recursive'
        fetch-depth: 0
    
    - name: Install ESP Rust toolchain
      uses: esp-rs/xtensa-toolchain@v1.5
      with:
        default: true
        buildtargets: esp32c3
        ldproxy: true
    
    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-esp-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-esp-cargo-
    
    - name: Generate semantic version
      id: version
      uses: paulhatch/semantic-version@v5.4.0
      with:
        tag_prefix: "v"
        major_pattern: "BREAKING CHANGE:"
        minor_pattern: "feat:"
        version_format: "${major}.${minor}.${patch}"
        bump_each_commit: false
        search_commit_body: true
        user_format_type: "csv"
        enable_prerelease_mode: ${{ github.event.inputs.prerelease }}
        debug: false
    
    - name: Override version type if specified
      id: final_version
      run: |
        if [ "${{ github.event.inputs.version_type }}" = "major" ]; then
          VERSION="${{ steps.version.outputs.major_version }}"
        elif [ "${{ github.event.inputs.version_type }}" = "minor" ]; then
          VERSION="${{ steps.version.outputs.minor_version }}"
        else
          VERSION="${{ steps.version.outputs.version }}"
        fi
        
        if [ "${{ github.event.inputs.prerelease }}" = "true" ]; then
          VERSION="${VERSION}-rc.$(date +'%Y%m%d%H%M%S')"
        fi
        
        echo "version=v$VERSION" >> $GITHUB_OUTPUT
        echo "Final version: v$VERSION"
    
    - name: Build release binary
      run: cargo +esp build --target riscv32imc-unknown-none-elf --release

    - name: Install espflash
      run: cargo install espflash

    - name: Generate binary files
      run: |
        espflash save-image --chip esp32c3 --merge target/riscv32imc-unknown-none-elf/release/network-monitor-esp-rs-no-std network-monitor-esp-rs-no-std.bin
        echo "Generated binary file: network-monitor-esp-rs-no-std.bin ($(stat -c%s network-monitor-esp-rs-no-std.bin) bytes)"
    
    - name: Generate changelog
      id: changelog
      run: |
        # Get the last release tag
        LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")

        if [ -z "$LAST_TAG" ]; then
          echo "## Changes" > CHANGELOG.md
          echo "" >> CHANGELOG.md
          echo "Initial release" >> CHANGELOG.md
        else
          echo "## Changes" > CHANGELOG.md
          echo "" >> CHANGELOG.md
          # Generate commit log
          git log --pretty=format:"- %s (%h)" $LAST_TAG..HEAD >> CHANGELOG.md

          if [ ! -s CHANGELOG.md ] || [ "$(wc -l < CHANGELOG.md)" -le 2 ]; then
            echo "- Code optimization and bug fixes" >> CHANGELOG.md
          fi
        fi
        
        echo "changelog<<EOF" >> $GITHUB_OUTPUT
        cat CHANGELOG.md >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: Create release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.final_version.outputs.version }}
        name: "Release ${{ steps.final_version.outputs.version }}"
        body: |
          ðŸŽ‰ **Official Release**

          ${{ steps.changelog.outputs.changelog }}

          ## Build Information
          - **Build Time:** $(date +'%Y-%m-%d %H:%M:%S UTC')
          - **Commit Hash:** ${{ github.sha }}
          - **Rust Version:** ESP Rust toolchain
          - **Target Architecture:** riscv32imc-unknown-none-elf (ESP32-C3)

          ## File Description
          - `network-monitor-esp-rs-no-std` - Main firmware file (ELF format with debug info)
          - `network-monitor-esp-rs-no-std.bin` - Binary firmware file for flashing

          ## Flashing and Usage Instructions

          ### 1. Using espflash (recommended)
          ```bash
          # Install espflash
          cargo install espflash

          # Flash firmware
          espflash flash --monitor network-monitor-esp-rs-no-std.bin
          ```

          ### 2. Using cargo run (recommended for development)
          ```bash
          # Clone repository
          git clone https://github.com/IvanLi-CN/Network-Monitor-esp-rs-no-std.git
          cd Network-Monitor-esp-rs-no-std

          # Set environment variables
          export SSID="your_wifi_ssid"
          export PASSWORD="your_wifi_password"
          export SERVER_ADDRESS="your_server_ip:port"

          # Run directly
          cargo +esp run --release
          ```

          ### 3. Using esptool.py
          ```bash
          # Install esptool
          pip install esptool

          # Flash firmware
          esptool.py --chip esp32c3 --port /dev/ttyUSB0 --baud 460800 write_flash 0x0 network-monitor-esp-rs-no-std.bin
          ```

          ## Hardware Requirements
          - **Microcontroller:** ESP32-C3 (RISC-V architecture)
          - **Display:** ST7735 TFT LCD (160x128 pixels)
          - **Network:** WiFi connectivity
          - **Power:** USB-C or external 3.3V/5V supply

          ## Configuration
          Before flashing, configure your network settings:
          1. Set WiFi credentials in environment variables
          2. Configure server address for network monitoring
          3. Adjust display settings if needed

          ## Features
          - Real-time network traffic monitoring
          - WiFi connectivity status display
          - Colorful TFT display interface
          - Low power consumption
          - Embedded Rust performance
        files: |
          target/riscv32imc-unknown-none-elf/release/network-monitor-esp-rs-no-std
          network-monitor-esp-rs-no-std.bin
        prerelease: ${{ github.event.inputs.prerelease }}
        draft: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
